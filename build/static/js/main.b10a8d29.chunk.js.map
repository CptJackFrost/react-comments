{"version":3,"sources":["Article.js","Post.js","CommentForm.js","CommentSection.js","serviceWorker.js","index.js"],"names":["Article","className","href","Timer","props","state","seconds","time","Date","now","this","postDate","Math","round","setState","dateString","getTime","interval","setInterval","tick","clearInterval","React","Component","Post","count","visible","handleClick","bind","e","preventDefault","formBinder","index","level","i","points","setVisible","switcher","wrapperClass","src","alt","user","onClick","changeKarma","dangerouslySetInnerHTML","__html","text","CommentForm","date","nameInput","mailInput","handleChangeName","handleChangeMail","handleChangeText","handleSubmit","visibility","onSubmit","htmlFor","type","name","id","onChange","value","cols","rows","target","length","data","JSON","parse","stringify","updateData","alert","CommentSection","updateItems","formData","newItem","Remarkable","render","updatedItems","items","splice","formPosition","Infinity","console","log","forEach","element","depth","setForm","depthLevel","sectionArray","map","item","key","indexOf","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b10a8d29.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nfunction Article() {\n  return (\n    <div className=\"Article\">\n      <h1>\n        <a href=\"#\">Lorem Ipsum</a>\n      </h1>\n      <span className=\"date\">01.01.2014</span>\n      <p className=\"text\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Proin at dapibus est. Suspendisse ut lacinia nulla. Nullam molestie, diam vitae cursus venenatis, ante purus ullamcorper lectus, sed eleifend magna mauris nec sem. In at lacus nibh. Integer eu urna quis sapien rhoncus tempus ut a augue. Vestibulum rutrum auctor luctus. Nunc tempus pulvinar bibendum. Curabitur elementum gravida augue, a pretium magna fermentum in. Quisque vel aliquet sapien. Sed id mattis lectus, quis varius urna. Integer eu fermentum diam. Suspendisse pulvinar odio sed condimentum ultricies.</p>\n      <p className=\"text\">Ut blandit eros ex, eget convallis nibh varius non. Fusce accumsan arcu non ultrices pharetra. Curabitur porta ex diam, nec dignissim tortor fringilla at. Fusce at ligula ac nibh mattis facilisis vitae sed felis. Sed pellentesque dapibus suscipit. Curabitur blandit ligula auctor, porta purus ut, mattis lorem. Vestibulum ac est ac ligula gravida varius in sed mi. Phasellus aliquet augue sed hendrerit vulputate. Proin et dui posuere tellus tempus hendrerit eget at urna. Curabitur vitae risus non est vehicula pretium. Pellentesque nec erat eleifend, lacinia nisl ut, suscipit augue. Nunc quis gravida nibh. Quisque ut tortor et urna molestie malesuada at sit amet urna. Curabitur condimentum, justo ut pretium ultricies, velit est posuere enim, quis feugiat massa nisl nec neque.</p>\n      <p className=\"text\">Maecenas nec ornare leo, in egestas tellus. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus maximus congue dolor, sed hendrerit odio vulputate vel. Suspendisse bibendum massa quis lorem malesuada congue. Vivamus varius magna in mi luctus viverra. Sed sapien velit, venenatis feugiat rhoncus in, finibus ut leo. Etiam mattis vitae turpis et interdum. Mauris dictum eu massa et venenatis. Quisque convallis sit amet dui in tempus. Nunc varius sem eros. Maecenas a elit varius, eleifend lectus sed, tincidunt tortor. Suspendisse mollis pellentesque diam nec commodo. Fusce id leo nisl. Aenean porttitor felis quis nibh scelerisque efficitur. Maecenas eget leo eleifend, imperdiet ex sit amet, luctus tellus.</p>\n      <p className=\"text\">Nunc eget tellus ac ipsum condimentum vulputate vitae ac diam. Phasellus in orci et sem laoreet ornare et vel quam. Praesent ultricies, tortor commodo tempor vulputate, sapien urna blandit purus, vitae dapibus lorem felis ut velit. Sed lobortis libero eget ante finibus, id varius tortor euismod. Quisque fermentum arcu ipsum, sit amet blandit est finibus id. Sed sit amet diam lacus. Duis ipsum nunc, rutrum eget faucibus vestibulum, volutpat in erat. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec non urna lobortis, vehicula sem vel, tristique eros. Cras quis faucibus neque. Vivamus facilisis dapibus convallis. Donec bibendum erat vel pellentesque suscipit. In sed imperdiet enim. Aenean quis ultricies nulla. Nulla facilisi.</p>\n    </div>\n  );\n}\n\nexport default Article;\n","import React from 'react';\r\nimport './App.scss';\r\n\r\nclass Timer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            seconds: 0\r\n        }\r\n    }\r\n\r\n    getTime() {\r\n        const time = (Date.now() - this.props.postDate)/1000;\r\n        let date;\r\n        if (time < 3600){\r\n            date = `${Math.round(time / 60)} минут назад`;\r\n        } else if (time < 3600 * 24) {\r\n            date = `${Math.round(time / 3600)} часов назад`;\r\n        } else {\r\n            date = `${Math.round(time / (3600 * 24))} дней назад`;\r\n        }\r\n\r\n        return date;\r\n    }\r\n\r\n    tick() {\r\n        this.setState(state => ({\r\n            seconds: state.seconds + 1,\r\n            dateString: this.getTime()\r\n        }));\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.interval = setInterval(() => this.tick(), 1000);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }    \r\n\r\n    render(){\r\n        return(\r\n            <span className=\"date\">{this.state.dateString}</span>\r\n        )\r\n    }\r\n}\r\n\r\nclass Post extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            count: 0,\r\n            visible: true\r\n        }\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick(e){\r\n        e.preventDefault();\r\n        this.props.formBinder(this.props.index + 1, this.props.level);\r\n    }\r\n\r\n    changeKarma(i) {       \r\n        const points = this.state.count + i;\r\n        if (points < -10) {\r\n            this.setVisible(false);\r\n        } else {\r\n            this.setVisible(true);\r\n        }\r\n        this.setState((state)=>{\r\n            return {\r\n                count: points,\r\n            }\r\n        })\r\n    }\r\n    \r\n    setVisible(switcher) {\r\n        this.setState(({visible}) => {\r\n            return {\r\n                visible: switcher\r\n            }\r\n        })\r\n    }\r\n\r\n    \r\n    render() {\r\n        const count = this.state.count;\r\n        const wrapperClass = `wrapper level-${this.props.level}`;\r\n        if (this.state.visible === true) {\r\n            return(\r\n                <div className={wrapperClass}>\r\n                    <div><img src=\"placeholder.jpg\" alt=\"аватар\" className=\"avatar\"></img></div>\r\n                    <div className=\"post-content\">\r\n                        <div className=\"data\">\r\n                            <div className=\"user\">{this.props.user}</div>\r\n                            <Timer postDate={this.props.postDate}/>\r\n                            <div className=\"karma\">\r\n                                <button className=\"plus\" onClick={() => this.changeKarma(1)}>+</button>\r\n                                <div>{count}</div>\r\n                                <button className=\"minus\" onClick={() => this.changeKarma(-1)}>-</button>\r\n                            </div>\r\n                            <button className=\"reply\" onClick={this.handleClick}>Ответить</button>\r\n                        </div>                    \r\n                        <p className=\"commText\" dangerouslySetInnerHTML={{__html: this.props.text}}></p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div className=\"wrapper\">\r\n                    <div><img src=\"placeholder.jpg\" alt=\"аватар\" className=\"avatar\"></img></div>\r\n                    <div className=\"post-content\">\r\n                        <div className=\"data\">\r\n                            <div className=\"user\">{this.props.user}</div>\r\n                            <Timer postDate={this.props.postDate}/>\r\n                            <div className=\"karma\">\r\n                                <button className=\"plus\" onClick={() => this.changeKarma(1)}>+</button>\r\n                                <div>{count}</div>\r\n                                <button className=\"minus\" onClick={() => this.changeKarma(-1)}>-</button>\r\n                            </div>\r\n                        </div>                    \r\n                        <p className=\"commText\">\r\n                            <button onClick={() => this.setVisible(true)}>Развернуть комментарий</button>\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport './App.scss';\r\n\r\nclass CommentForm extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            date: Date.now(),\r\n            nameInput: '',\r\n            mailInput: '',\r\n            text: '',\r\n        }\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangeMail = this.handleChangeMail.bind(this);\r\n        this.handleChangeText = this.handleChangeText.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    render(){\r\n        return(            \r\n            <div className={this.state.visibility}>\r\n            <fieldset>\r\n                <legend>\r\n                    Добавить комментарий\r\n                </legend>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"name\">Имя:</label>\r\n                        <input type=\"text\"\r\n                               name=\"name\"\r\n                               id=\"name\"\r\n                               onChange={this.handleChangeName}\r\n                               value={this.state.nameInput}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"mail\">E-mail:</label>\r\n                        <input type=\"email\" \r\n                               name=\"mail\" \r\n                               id=\"mail\"\r\n                               onChange={this.handleChangeMail}\r\n                               value={this.state.mailInput}></input>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"text\">Текст комментария:</label>\r\n                        <textarea cols=\"70\" \r\n                                  rows=\"10\"\r\n                                  name=\"text\"\r\n                                  id=\"text\"\r\n                                  onChange={this.handleChangeText}\r\n                                  value={this.state.text}></textarea>\r\n                    </div>                    \r\n                    <input className=\"submit\" type=\"submit\" value=\"Добавить комментарий\"></input>\r\n                </form>\r\n            </fieldset>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleChangeName(e) {\r\n        this.setState({\r\n            nameInput: e.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeMail(e) {\r\n        this.setState({\r\n            mailInput: e.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeText(e) {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (!(this.state.text.length && \r\n            this.state.nameInput.length && \r\n            this.state.mailInput.length)){\r\n                alert(\"Заполните все поля\");\r\n                return;\r\n        }\r\n\r\n        this.setState(state => {\r\n            return {\r\n                date: Date.now(),\r\n                nameInput: '',\r\n                mailInput: '',\r\n                text: '',\r\n            }\r\n        })\r\n        \r\n        const data = JSON.parse(JSON.stringify(this.state))\r\n        data[\"level\"] = this.props.level\r\n\r\n        this.props.updateData(data)\r\n    }\r\n}\r\n\r\nexport default CommentForm;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Post from './Post'\r\nimport CommentForm from './CommentForm';\r\nimport {Remarkable} from 'remarkable'\r\nclass CommentSection extends React.Component {\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            items: [\r\n            {\r\n                level: 0,\r\n                date: Date.parse(\"2020-04-08 20:00:00\"),\r\n                user: \"Lorem Ipsum\",\r\n                text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie.\" \r\n            },\r\n            {\r\n                level: 0,\r\n                date: Date.parse(\"2020-04-09 20:00:00\"),\r\n                user: \"Lorem Ipsum\",\r\n                text: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean ullamcorper nulla a quam commodo, id scelerisque tellus molestie.\" \r\n            }],\r\n            formPosition: Infinity,\r\n            depth: 0\r\n        }\r\n        this.setForm = this.setForm.bind(this)\r\n    }\r\n\r\n    setForm(index, level) {\r\n        let depthLevel\r\n        if (level === 3){\r\n            depthLevel = 3\r\n        } else {\r\n            depthLevel = level + 1\r\n        }\r\n        this.setState(({depth})=>{\r\n            return {\r\n                depth: depthLevel\r\n            }\r\n        })\r\n\r\n        this.setState(({formPosition}) => {\r\n            return {\r\n                formPosition: index\r\n            }\r\n        })\r\n    }\r\n\r\n    updateItems = (formData) => {\r\n        const newItem = {\r\n            date: formData.date,\r\n            user: formData.nameInput,\r\n            text: new Remarkable().render(formData.text),\r\n            level: formData.level\r\n        }\r\n        const updatedItems = this.state.items\r\n        updatedItems.splice(this.state.formPosition, 0, newItem)\r\n        this.setState(state => {\r\n            return {\r\n                items: updatedItems,\r\n                formPosition: Infinity\r\n            }\r\n        })\r\n\r\n        console.log(\"итемы: \")\r\n        this.state.items.forEach(element => {\r\n            console.log(element)\r\n        });\r\n    }\r\n    \r\n    render(){\r\n        const sectionArray = this.state.items.map(item => (\r\n            <div key={this.state.items.indexOf(item)} className=\"post\">\r\n                <Post\r\n                level={item.level}\r\n                key={this.state.items.indexOf(item)} \r\n                index={this.state.items.indexOf(item)}\r\n                postDate={item.date} \r\n                user={item.user}  \r\n                text={item.text}\r\n                formBinder={this.setForm}/>                        \r\n            </div>                                  \r\n        ))\r\n\r\n        sectionArray.splice(this.state.formPosition, 0, <CommentForm key=\"form\" level={this.state.depth} updateData={this.updateItems}/>)\r\n        \r\n        return(\r\n            <div className=\"commSection\">                \r\n                {sectionArray}\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default CommentSection;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Article from './Article';\nimport CommentSection from './CommentSection'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Article />    \n    <CommentSection />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}